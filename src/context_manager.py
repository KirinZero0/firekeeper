class ContextManager:
    def __init__(self, max_context_length=5):
        """
        Initialize the ContextManager to keep track of the conversation history.

        :param max_context_length: The number of exchanges (user + assistant) to keep in context.
        """
        self.max_context_length = max_context_length  # Limit of exchanges to keep in context
        self.conversation_history = []  # List to store conversation history

    def add_exchange(self, user_message, firekeeper_response):
        """
        Add the latest user and Firekeeper responses to the conversation history.

        :param user_message: The latest user input.
        :param firekeeper_response: The response generated by Firekeeper.
        """
        # Add user and Firekeeper's messages to the history
        self.conversation_history.append({'role': 'user', 'content': user_message})
        self.conversation_history.append({'role': 'assistant', 'content': firekeeper_response})

        # Trim history to stay within the max context length
        if len(self.conversation_history) > self.max_context_length * 2:  # *2 for user + assistant pairs
            self.conversation_history = self.conversation_history[-(self.max_context_length * 2):]

    def get_trimmed_context(self):
        """
        Retrieve the most recent conversation context.

        :return: A list of the most recent exchanges (user + assistant).
        """
        return self.conversation_history

    def format_context_for_api(self):
        """
        Format the conversation history into a format suitable for the OpenAI API.

        :return: A list of messages with the roles (user and assistant) and their contents.
        """
        return [{'role': message['role'], 'content': message['content']} for message in self.get_trimmed_context()]

    def clear_context(self):
        """
        Clears the conversation history.
        """
        self.conversation_history = []

    def view_context(self):
        """Returns the current context for inspection (for debugging or checking)."""
        return self.context